.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "CSS::SpriteMaker 3"
.TH CSS::SpriteMaker 3 "2013-06-30" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
CSS::SpriteMaker \- Combine several images into a single CSS sprite
.SH "VERSION"
.IX Header "VERSION"
Version 0.01
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use CSS::SpriteMaker;
\&
\&    my $SpriteMaker = CSS::SpriteMaker\->new(
\&        verbose => 1, # optional
\&        rc_filename_to_classname => sub { my $filename = shift; ... } # optional
\&    );
\&
\&    $SpriteMaker\->make_sprite(
\&        source_images  => [\*(Aq/path/to/imagedir\*(Aq, \*(Aq/images/img1.png\*(Aq, \*(Aq/img2.png\*(Aq];
\&        target_file => \*(Aq/tmp/test/mysprite.png\*(Aq,
\&        layout_name => \*(AqPacked\*(Aq,    # optional
\&        remove_source_padding => 1, # optional
\&        format => \*(Aqpng8\*(Aq,           # optional
\&    );
\&
\&    $SpriteMaker\->print_css();
\&
\&    $SpriteMaker\->print_html();
\&
\&    OR
\&
\&    my $SpriteMaker = CSS::SpriteMaker\->new();
\&
\&    $SpriteMaker\->make_sprite(
\&       source_dir => \*(Aq/tmp/test/images\*(Aq,
\&       target_file => \*(Aq/tmp/test/mysprite.png\*(Aq,
\&    );
\&
\&    $SpriteMaker\->print_css();
\&
\&    $SpriteMaker\->print_html();
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A \s-1CSS\s0 Sprite is an image obtained by arranging many smaller images on a 2D
canvas, according to a certain layout.
.PP
Transferring one larger image is generally faster than transferring multiple
images separately as it greatly reduces the number of \s-1HTTP\s0 requests (and
overhead) necessary to render the original images on the browser.
.SH "PUBLIC METHODS"
.IX Header "PUBLIC METHODS"
.SS "new"
.IX Subsection "new"
Create and configure a new CSS::SpriteMaker object.
.PP
The object can be initialised as follows:
.PP
.Vb 6
\&    my $SpriteMaker = CSS::SpriteMaker\->new({
\&        source_dir => \*(Aq/tmp/test/images\*(Aq,       # optional
\&        target_file => \*(Aq/tmp/test/mysprite.png\*(Aq # optional
\&        remove_source_padding => 1, # optional
\&        verbose => 1,               # optional
\&    });
\&    
\&    $opts{remove_source_padding} //= 1;
\&    $opts{verbose}               //= 0;
\&    $opts{format}                //= \*(Aqpng\*(Aq;
.Ve
.SS "make_sprite"
.IX Subsection "make_sprite"
Creates the sprite file out of the specifed image files or directories, and
according to the given layout name.
.PP
my \f(CW$is_error\fR = \f(CW$SpriteMaker\fR\->make_sprite(
    source_images => ['some/file.png', path/to/some_directory],
    target_file => 'sample_sprite.png',
    layout_name => 'Packed',
.PP
.Vb 3
\&    # all imagemagick supported formats
\&    format => \*(Aqpng8\*(Aq, # optional, default is png
\&);
.Ve
.PP
returns true if an error occurred during the procedure.
.PP
Available layouts are:
.PP
\&\- Packed: try to pack together the images as much as possible to reduce the
  image size.
.PP
\&\- DirectoryBased: put images under the same directory on the same horizontal
  line. Within each line, order alphabetically.
.SS "print_css"
.IX Subsection "print_css"
Creates and prints the css stylesheet for the sprite that was previously
produced.
.PP
\&\f(CW$SpriteMaker\fR\->print_css(
   filehandle => \f(CW$fh\fR, 
);
.PP
\&\s-1OR\s0
.PP
\&\f(CW$SpriteMaker\fR\->print_css(
   filename => 'relative/path/to/style.css',
);
.PP
\&\s-1NOTE:\s0 \fImake_sprite()\fR must be called before this method is called.
.SS "print_html"
.IX Subsection "print_html"
Creates and prints an html sample page containing informations about each sprite produced.
.PP
\&\f(CW$SpriteMaker\fR\->print_html(
   filehandle => \f(CW$fh\fR, 
);
.PP
\&\s-1OR\s0
.PP
\&\f(CW$SpriteMaker\fR\->print_html(
   filename => 'relative/path/to/index.html',
);
.PP
\&\s-1NOTE:\s0 \fImake_sprite()\fR must be called before this method is called.
.SS "get_css_info_structure"
.IX Subsection "get_css_info_structure"
Returns an arrayref of hashrefs like:
.PP
[
    {
        full_path => 'relative/path/to/file.png',
        css_class => 'file',
        width     => 16,  # pixels
        height    => 16,
        x         => 173, # offset within the layout
        y         => 234,
    },
    ...
]
.PP
This structure can be used to build your own html or css stylesheet for example.
.PP
\&\s-1NOTE:\s0 the x y offsets within the layout, will be always positive numbers.
.SH "PRIVATE METHODS"
.IX Header "PRIVATE METHODS"
.SS "_generate_css_class_names"
.IX Subsection "_generate_css_class_names"
Returns a mapping id \-> class_name out of the current information structure.
.PP
It guarantees unique class_name for each id.
.SS "_image_locations_to_source_info"
.IX Subsection "_image_locations_to_source_info"
Identify informations from the location of each input image.
.SS "_locate_image_files"
.IX Subsection "_locate_image_files"
Finds the location of image files within the given directory. Returns an
arrayref of hashrefs containing information about the names and pathnames of
each image file.
.PP
The returned arrayref looks like:
.PP
[   # pathnames of the first image to follow
    {
        name => 'image.png',
        pathname => '/complete/path/to/image.png',
        parentdir => '/complete/path/to',
    },
    ...
]
.PP
Dies if the given directory is empty or doesn't exist.
.SS "_get_stylesheet_string"
.IX Subsection "_get_stylesheet_string"
Returns the stylesheet in a string.
.SS "_generate_css_class_name"
.IX Subsection "_generate_css_class_name"
This method generates the name of the \s-1CSS\s0 class for a certain image file. Takes
the image filename as input and produces a css class name (including the .)
.SS "_ensure_filehandle_write"
.IX Subsection "_ensure_filehandle_write"
Inspects the input \f(CW%options\fR hash and returns a filehandle according to the
parameters passed in there.
.PP
The filehandle is where something (css stylesheet for example) is going to be
printed.
.SS "_ensure_sources_info"
.IX Subsection "_ensure_sources_info"
Makes sure the user of this module has provided a valid input parameter for
sources_info and return the sources_info structure accordingly. Dies in case
something goes wrong with the user input.
.PP
Parameters that allow us to obtain a \f(CW$rh_sources_info\fR structure are:
.PP
\&\- source_images: an arrayref of files or directories, directories will be
  visited recursively and any image file in it becomes the input.
.PP
If none of the above parameters have been found in input options, the cache is
checked before giving up \- i.e., the user has previously provided the layout
parameter, and was able to generate a sprite.
.SS "_ensure_layout"
.IX Subsection "_ensure_layout"
Makes sure the user of this module has provided valid layout options and
returns a \f(CW$Layout\fR object accordingly. Dies in case something goes wrong with
the user input.
.PP
Parameters that allow us to obtain a \f(CW$Layout\fR object are:
.PP
\&\- layout: a CSS::SpriteMaker::Layout object already;
\&\- layout_name: the name of a CSS::SpriteMaker::Layout object.
.PP
If none of the above parameters have been found in input options, the cache is
checked before giving up \- i.e., the user has previously provided the layout
parameter...
.SS "_get_image_properties"
.IX Subsection "_get_image_properties"
Return an hashref of information about the image at the given pathname.
.SS "_generate_color_histogram"
.IX Subsection "_generate_color_histogram"
Generate color histogram out of the information structure of all the images.
.SS "_verbose"
.IX Subsection "_verbose"
Print verbose output only if the verbose option was passed as input.
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
Copyright 2013 Savio Dimatteo.
.PP
This program is free software; you can redistribute it and/or modify it
under the terms of either: the \s-1GNU\s0 General Public License as published
by the Free Software Foundation; or the Artistic License.
.PP
See http://dev.perl.org/licenses/ for more information.
